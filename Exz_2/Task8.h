#pragma once
#include "First.h"

namespace Styudent {
	// ================
	const double arr[34][8] = {
			{ 3.078,  6.314 , 12.706 , 31.821 , 63.656 , 127.321 , 318.289 , 636.578 },
			{ 1.886, 2.920 , 4.303 , 6.965 , 9.925 , 14.089, 22.328, 31.600 },
			{ 1.638, 2.353 , 3.182 , 4.541 , 5.841 , 7.453 , 10.214, 12.924 },
			{ 1.533, 2.132 , 2.776 , 3.747 , 4.604 , 5.598 , 7.173 , 8.610 },
			{ 1.476, 2.015 , 2.571 , 3.365 , 4.032 , 4.773 , 5.894 , 6.869 },
			{ 1.440, 1.943 , 2.447 , 3.143 , 3.707 , 4.317 , 5.208 , 5.959 },
			{ 1.415, 1.895 , 2.365 , 2.998 , 3.499 , 4.029 , 4.785 , 5.408 },
			{ 1.397, 1.860 , 2.306 , 2.896 , 3.355 , 3.833 , 4.501 , 5.041 },
			{ 1.383, 1.833 , 2.262 , 2.821 , 3.250 , 3.690 , 4.297 , 4.781 },
			{ 1.372, 1.812 , 2.228 , 2.764 , 3.169 , 3.581 , 4.144 , 4.587 },
			{ 1.363, 1.796 , 2.201 , 2.718 , 3.106 , 3.497 , 4.025 , 4.437 },
			{ 1.356, 1.782 , 2.179 , 2.681 , 3.055 , 3.428 , 3.930 , 4.318 },
			{ 1.350, 1.771 , 2.160 , 2.650 , 3.012 , 3.372 , 3.852 , 4.221 },
			{ 1.345, 1.761 , 2.145 , 2.624 , 2.977 , 3.326 , 3.787 , 4.140 },
			{ 1.341, 1.753 , 2.131 , 2.602 , 2.947 , 3.286 , 3.733 , 4.073 },
			{ 1.337, 1.746 , 2.120 , 2.583 , 2.921 , 3.252 , 3.686 , 4.015 },
			{ 1.333, 1.740 , 2.110 , 2.567 , 2.898 , 3.222 , 3.646 , 3.965 },
			{ 1.330, 1.734 , 2.101 , 2.552 , 2.878 , 3.197 , 3.610 , 3.922 },
			{ 1.328, 1.729 , 2.093 , 2.539 , 2.861 , 3.174 , 3.579 , 3.883 },
			{ 1.325, 1.725 , 2.086 , 2.528 , 2.845 , 3.153 , 3.552 , 3.850 },
			{ 1.323, 1.721 , 2.080 , 2.518 , 2.831 , 3.135 , 3.527 , 3.819 },
			{ 1.321, 1.717 , 2.074 , 2.508 , 2.819 , 3.119 , 3.505 , 3.792 },
			{ 1.319, 1.714 , 2.069 , 2.500 , 2.807 , 3.104 , 3.485 , 3.768 },
			{ 1.318, 1.711 , 2.064 , 2.492 , 2.797 , 3.091 , 3.467 , 3.745 },
			{ 1.316, 1.708 , 2.060 , 2.485 , 2.787 , 3.078 , 3.450 , 3.725 },
			{ 1.315, 1.706 , 2.056 , 2.479 , 2.779 , 3.067 , 3.435 , 3.707 },
			{ 1.314, 1.703 , 2.052 , 2.473 , 2.771 , 3.057 , 3.421 , 3.689 },
			{ 1.313, 1.701 , 2.048 , 2.467 , 2.763 , 3.047 , 3.408 , 3.674 },
			{ 1.311, 1.699 , 2.045 , 2.462 , 2.756 , 3.038 , 3.396 , 3.660 },
			{ 1.310, 1.697 , 2.042 , 2.457 , 2.750 , 3.030 , 3.385 , 3.646 },
			{ 1.303, 1.684 , 2.021 , 2.423 , 2.704 , 2.971 , 3.307 , 3.551 },
			{ 1.296, 1.671 , 2.000 , 2.390 , 2.660 , 2.915 , 3.232 , 3.460 },
			{ 1.289, 1.658 , 1.980 , 2.358 , 2.617 , 2.860 , 3.160 , 3.373 },
			{ 1.282, 1.645 , 1.960 , 2.326 , 2.576 , 2.807 , 3.090 , 3.290 } };
	// ================
	static size_t index_a(double a)
	{
		static double arr_a[]{ 0.2,0.1,0.05,0.02,0.01,0.005,0.002,0.001 };
		for (size_t i = 0; i < 8; i++)
		{
			if (arr_a[i] == a)
			{
				return i;
			}
		}
	}
	// ================
	static size_t index_k(int k)
	{
		static int arr_k[]{ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26
		,27,28,29,30,40,60,120};
		for (size_t i = 0; i < 33; i++)
		{
			if (arr_k[i] == k)
			{
				return i;
			}
		}
	}
}




namespace Fisher {

	double arr[33][18] = { {161, 199, 216, 225 ,230, 234, 237, 239, 241, 242, 243, 244, 246, 248 ,249 ,250, 251, 252},
 {18.51 , 19.00 , 19.16, 19.25, 19.30, 19.33, 19.35, 19.37, 19.38, 19.40, 19.40, 19.41, 19.43, 19.45, 19.45, 19.46, 19.47, 19.48},
 {10.13 , 9.55 , 9.28 , 9.12 , 9.01 , 8.94 , 8.89 , 8.85 , 8.81 , 8.79 , 8.76 , 8.74 , 8.70 , 8.66 , 8.64  , 8.62  , 8.59 , 8.57},
 {7.71 , 6.94 , 6.59 , 6.39 , 6.26 , 6.16 , 6.09 , 6.04 , 6.00 , 5.96 , 5.94 , 5.91 , 5.86 , 5.80 , 5.77  , 5.75  , 5.72 , 5.69},
 {6.61 , 5.79 , 5.41 , 5.19 , 5.05 , 4.95 , 4.88 , 4.82 , 4.77 , 4.74 , 4.70 , 4.68 , 4.62 , 4.56 , 4.53  , 4.50  , 4.46 , 4.43},
 {5.99 , 5.14 , 4.76 , 4.53 , 4.39 , 4.28 , 4.21 , 4.15 , 4.10 , 4.06 , 4.03 , 4.00 , 3.94 , 3.87 , 3.84  , 3.81  , 3.77 , 3.74},
 {5.59 , 4.74 , 4.35 , 4.12 , 3.97 , 3.87 , 3.79 , 3.73 , 3.68 , 3.64 , 3.60 , 3.57 , 3.51 , 3.44 , 3.41  , 3.38  , 3.34 , 3.30},
 {5.32 , 4.46 , 4.07 , 3.84 , 3.69 , 3.58 , 3.50 , 3.44 , 3.39 , 3.35 , 3.31 , 3.28 , 3.22 , 3.15 , 3.12  , 3.08  , 3.04 , 3.01},
 {5.12 , 4.26 , 3.86 , 3.63 , 3.48 , 3.37 , 3.29 , 3.23 , 3.18 , 3.14 , 3.10 , 3.07 , 3.01 , 2.94 , 2.90  , 2.86  , 2.83 , 2.79},
 {4.96 , 4.10 , 3.71 , 3.48 , 3.33 , 3.22 , 3.14 , 3.07 , 3.02 , 2.98 , 2.94 , 2.91 , 2.85 , 2.77 , 2.74  , 2.70  , 2.66 , 2.62},
 {4.84 , 3.98 , 3.59 , 3.36 , 3.20 , 3.09 , 3.01 , 2.95 , 2.90 , 2.85 , 2.82 , 2.79 , 2.72 , 2.65 , 2.61  , 2.57  , 2.53 , 2.49},
 {4.75 , 3.89 , 3.49 , 3.26 , 3.11 , 3.00 , 2.91 , 2.85 , 2.80 , 2.75 , 2.72 , 2.69 , 2.62 , 2.54 , 2.51  , 2.47  , 2.43 , 2.38},
 {4.67 , 3.81 , 3.41 , 3.18 , 3.03 , 2.92 , 2.83 , 2.77 , 2.71 , 2.67 , 2.63 , 2.60 , 2.53 , 2.46 , 2.42  , 2.38  , 2.34 , 2.30},
 {4.60 , 3.74 , 3.34 , 3.11 , 2.96 , 2.85 , 2.76 , 2.70 , 2.65 , 2.60 , 2.57 , 2.53 , 2.46 , 2.39 , 2.35  , 2.31  , 2.27 , 2.22},
 {4.54 , 3.68 , 3.29 , 3.06 , 2.90 , 2.79 , 2.71 , 2.64 , 2.59 , 2.54 , 2.51 , 2.48 , 2.40 , 2.33 , 2.29  , 2.25  , 2.20 , 2.16},
 {4.49 , 3.63 , 3.24 , 3.01 , 2.85 , 2.74 , 2.66 , 2.59 , 2.54 , 2.49 , 2.46 , 2.42 , 2.35 , 2.28 , 2.24  , 2.19  , 2.15 , 2.11},
 {4.45 , 3.59 , 3.20 , 2.96 , 2.81 , 2.70 , 2.61 , 2.55 , 2.49 , 2.45 , 2.41 , 2.38 , 2.31 , 2.23 , 2.19  , 2.15  , 2.10 , 2.06},
 {4.41 , 3.55 , 3.16 , 2.93 , 2.77 , 2.66 , 2.58 , 2.51 , 2.46 , 2.41 , 2.37 , 2.34 , 2.27 , 2.19 , 2.15  , 2.11  , 2.06 , 2.02},
 {4.38 , 3.52 , 3.13 , 2.90 , 2.74 , 2.63 , 2.54 , 2.48 , 2.42 , 2.38 , 2.34 , 2.31 , 2.23 , 2.16 , 2.11  , 2.07  , 2.03 , 1.98},
 {4.35 , 3.49 , 3.10 , 2.87 , 2.71 , 2.60 , 2.51 , 2.45 , 2.39 , 2.35 , 2.31 , 2.28 , 2.20 , 2.12 , 2.08  , 2.04  , 1.99 , 1.95},
 {4.32 , 3.47 , 3.07 , 2.84 , 2.68 , 2.57 , 2.49 , 2.42 , 2.37 , 2.32 , 2.28 , 2.25 , 2.18 , 2.10 , 2.05  , 2.01  , 1.96 , 1.92},
 {4.30 , 3.44 , 3.05 , 2.82 , 2.66 , 2.55 , 2.46 , 2.40 , 2.34 , 2.30 , 2.26 , 2.23 , 2.15 , 2.07 , 2.03  , 1.98  , 1.94 , 1.89},
 {4.28 , 3.42 , 3.03 , 2.80 , 2.64 , 2.53 , 2.44 , 2.37 , 2.32 , 2.27 , 2.24 , 2.20 , 2.13 , 2.05 , 2.01  , 1.96  , 1.91 , 1.86},
 {4.26 , 3.40 , 3.01 , 2.78 , 2.62 , 2.51 , 2.42 , 2.36 , 2.30 , 2.25 , 2.22 , 2.18 , 2.11 , 2.03 , 1.98  , 1.94  , 1.89 , 1.84},
 {4.24 , 3.39 , 2.99 , 2.76 , 2.60 , 2.49 , 2.40 , 2.34 , 2.28 , 2.24 , 2.20 , 2.16 , 2.09 , 2.01 , 1.96  , 1.92  , 1.87 , 1.82},
 {4.23 , 3.37 , 2.98 , 2.74 , 2.59 , 2.47 , 2.39 , 2.32 , 2.27 , 2.22 , 2.18 , 2.15 , 2.07 , 1.99 , 1.95  , 1.90  , 1.85 , 1.80},
 {4.21 , 3.35 , 2.96 , 2.73 , 2.57 , 2.46 , 2.37 , 2.31 , 2.25 , 2.20 , 2.17 , 2.13 , 2.06 , 1.97 , 1.93  , 1.88  , 1.84 , 1.79},
 {4.20 , 3.34 , 2.95 , 2.71 , 2.56 , 2.45 , 2.36 , 2.29 , 2.24 , 2.19 , 2.15 , 2.12 , 2.04 , 1.96 , 1.91  , 1.87  , 1.82 , 1.77},
 {4.18 , 3.33 , 2.93 , 2.70 , 2.55 , 2.43 , 2.35 , 2.28 , 2.22 , 2.18 , 2.14 , 2.10 , 2.03 , 1.94 , 1.90  , 1.85  , 1.81 , 1.75},
 {4.17 , 3.32 , 2.92 , 2.69 , 2.53 , 2.42 , 2.33 , 2.27 , 2.21 , 2.16 , 2.13 , 2.09 , 2.01 , 1.93 , 1.89  , 1.84  , 1.79 , 1.74},
 {4.08 , 3.23 , 2.84 , 2.61 , 2.45 , 2.34 , 2.25 , 2.18 , 2.12 , 2.08 , 2.04 , 2.00 , 1.92 , 1.84 , 1.79  , 1.74  , 1.69 , 1.64},
 {4.00 , 3.15 , 2.76 , 2.53 , 2.37 , 2.25 , 2.17 , 2.10 , 2.04 , 1.99 , 1.95 , 1.92 , 1.84 , 1.75 , 1.70  , 1.65  , 1.59 , 1.53},
 {3.92 , 3.07 , 2.68 , 2.45 , 2.29 , 2.18 , 2.09 , 2.02 , 1.96 , 1.91 , 1.87 , 1.83 , 1.75 , 1.66 , 1.61  , 1.55  , 1.50 , 1.43} };

	// ================
	static size_t index_k2(double k)
	{
		static double arr_a[]{ 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
			26,27,28,29,30,40,60,120 };
		for (size_t i = 0; i < 33; i++)
		{
			if (arr_a[i] == k)
			{
				return i;
			}
		}
		return 2000;
	}
	// ================
	static size_t index_k1(double k)
	{
		static double arr_a[]{ 1,2,3,4,5,6,7,8,9,10,11,12,15,20,24,30,40,60 };
		for (size_t i = 0; i < 18; i++)
		{
			if (arr_a[i] == k)
			{
				return i;
			}
		}
		return 2000;
	}
}

double T(double x,double y,double n,double m,double sx,double sy)
{
	double t1 = x - y;

	double t2 = sqrt((n-1)*sx + (m-1)*sy);

	double t3 = sqrt((m*n*(n+m-2)/(m+n)));

	return t1 / t2 * t3;
}

double F_watch(double f,double s)
{
	return f / s;
}

double t_two(int k, double a)
{
	return Styudent::arr[Styudent::index_k(k)][Styudent::index_a(a)];
}

double F_fisher(int k1,int k2)
{
	return Fisher::arr[Fisher::index_k2(k2)][Fisher::index_k1(k1)];
}

void Answer8()
{
	int n = 5, m = 6;
	double  x = 3.3,  y = 2.48; 
	double sx = 0.25, sy = 0.108;
	double a = 0.05;

	int pravelo = 3;
	double uT = 0.0, ut = 0.0, uFW = 0.0, uFF = 0.0;
	uFW = F_watch(sx, sy);
	uFF = F_fisher(n - 1, m - 1);


	if (uFW < uFF)
	{
		cout << "F набл(" << uFW << ") < F кр(" << uFF << ")" << endl;
		cout << "Нет основынний отвергнуть нулевую гипотезу о равенстве генеральних дисперсий" << endl;
	}
	else if (uFW > uFF)
	{
		cout << "F набл (" << uFW << ") > F кр(" << uFF << ")" << endl;
		cout << "Есть основыния отвергнуть нулевую гипотезу о равенстве генеральних дисперсий" << endl;
	}

	if (pravelo == 1)
	{
		int k = n + m - 2;
		uT = fabs ( T(x, y, n, m, sx, sy));
		ut = t_two(k, a);
		



		if (uT < ut)
		{
			cout << "[T](" << uT << ") < t(" << ut << ")" << endl;
			cout << "Нет основаный отвергнуть нулевую гипотезу о равенстве генеральних дисперсий" << endl;
			cout << "Выборочные средние различаются незначимо" << endl;
		}
		else if (uT > ut)
		{
			cout << "[T](" << uT << ") > t(" << ut << ")" << endl;
			cout << "Нулевую гипотизу о равенстве генеральних дисперсий отвергаем " << endl;
			cout << "Выборочные средние различаются значимо" << endl;
		}

		
	}
	else if (pravelo == 2)
	{
		int k = n + m - 2;
		uT = T(x, y, n, m, sx, sy);
		ut = t_two(k, a);

		if (uT < ut)
		{
			cout << "T(" << uT << ") < t(" << ut << ")" << endl;
			cout << "Нет основаный отвергнуть нулевую гипотезу" << endl;
			cout << "Выборочные средние различаются незначимо" << endl;
		}
		else if (uT > ut)
		{
			cout << "T(" << uT << ") > t(" << ut << ")" << endl;
			cout << "Нулевую гипотизу отвергаем" << endl;
			cout << "Выборочные средние различаются значимо" << endl;
		}
	}
	else if (pravelo == 3)
	{
		int k = n + m - 2;
		uT = T(x, y, n, m, sx, sy);
		ut = -t_two(k, a);

		if (uT > ut)
		{
			cout << "T(" << uT << ") < -t(" << ut << ")" << endl;
			cout << "Нет основаный отвергнуть нулевую гипотезу" << endl;
			cout << "Выборочные средние различаются незначимо" << endl;
		}
		else if (uT < ut)
		{
			cout << "T(" << uT << ") > -t(" << ut << ")" << endl;
			cout << "Нулевую гипотизу отвергаем" << endl;
			cout << "Выборочные средние различаются значимо" << endl;
		}
	}





}



